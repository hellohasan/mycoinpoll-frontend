{"file":"useTokenStore-B5ownuVl.js","mappings":";;AAEY,MAAC,gBAAgB,YAAY,aAAa;AAAA,EACpD,OAAO,OAAO;AAAA,IACZ,QAAQ,CAAE;AAAA,IACV,OAAO;AAAA,IACP,SAAS;AAAA,IACT,OAAO;AAAA,EACX;AAAA,EAEE,SAAS;AAAA,IACP,eAAe,CAAC,UAAU,MAAM,OAAO,OAAO,CAAC,UAAU,MAAM,WAAW,IAAI;AAAA,IAC9E,gBAAgB,CAAC,UAAU,MAAM,OAAO,OAAO,CAAC,UAAU,MAAM,WAAW,KAAK;AAAA,EACjF;AAAA,EAED,SAAS;AAAA,IACP,MAAM,YAAY;AAChB,YAAM,SAAS,iBAAkB;AACjC,WAAK,UAAU;AACf,WAAK,QAAQ;AAEb,UAAI;AACF,cAAM,OAAO,MAAM,OAAO,GAAG,OAAO,OAAO,OAAO,SAAS;AAC3D,aAAK,SAAS,QAAQ,CAAE;AAAA,MACzB,SAAQ,KAAK;AACZ,aAAK,QAAQ,IAAI,WAAW;AAAA,MACpC,UAAgB;AACR,aAAK,UAAU;AAAA,MACvB;AAAA,IACK;AAAA,IAED,MAAM,eAAe,MAAM;AACzB,UAAI,CAAC,MAAM;AACT,aAAK,QAAQ;AACb,eAAO;AAAA,MACf;AAEM,YAAM,SAAS,iBAAkB;AACjC,WAAK,UAAU;AACf,WAAK,QAAQ;AAEb,UAAI;AACF,aAAK,QAAQ,MAAM,OAAO,GAAG,OAAO,OAAO,OAAO,UAAU,IAAI,EAAE;AAAA,MACnE,SAAQ,KAAK;AACZ,aAAK,QAAQ,IAAI,WAAW;AAC5B,aAAK,QAAQ;AAAA,MACrB,UAAgB;AACR,aAAK,UAAU;AAAA,MACvB;AAEM,aAAO,KAAK;AAAA,IACb;AAAA;AAAA,IAGD,aAAa;AACX,WAAK,QAAQ;AACb,WAAK,QAAQ;AAAA,IACd;AAAA,EACF;AACH,CAAC;","names":[],"sources":["../../../../stores/useTokenStore.js"],"sourcesContent":["import { defineStore } from \"pinia\";\n\nexport const useTokenStore = defineStore(\"tokenData\", {\n  state: () => ({\n    tokens: [],\n    token: null,\n    loading: false,\n    error: null,\n  }),\n\n  getters: {\n    runningTokens: (state) => state.tokens.filter((token) => token.status === true),\n    upcomingTokens: (state) => state.tokens.filter((token) => token.status === false),\n  },\n\n  actions: {\n    async getTokens() {\n      const config = useRuntimeConfig();\n      this.loading = true;\n      this.error = null;\n\n      try {\n        const data = await $fetch(`${config.public.apiBase}/tokens`);\n        this.tokens = data || [];\n      } catch (err) {\n        this.error = err.message || \"Failed to fetch tokens\";\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    async getSingleToken(slug) {\n      if (!slug) {\n        this.error = \"Slug is required\";\n        return null;\n      }\n\n      const config = useRuntimeConfig();\n      this.loading = true;\n      this.error = null;\n\n      try {\n        this.token = await $fetch(`${config.public.apiBase}/token/${slug}`);\n      } catch (err) {\n        this.error = err.message || \"Failed to fetch token\";\n        this.token = null;\n      } finally {\n        this.loading = false;\n      }\n\n      return this.token;\n    },\n\n    // Reset single token data\n    clearToken() {\n      this.token = null;\n      this.error = null;\n    },\n  },\n});\n"],"version":3}