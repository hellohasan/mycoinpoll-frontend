{"file":"index-BpFsp-zi.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyEC,UAAM,SAAS,iBAAiB;AACA,YAAQ;AAClC,UAAA,kBAAkB,IAAI,EAAE;AAC9B,UAAM,YAAY,aAAa;AAC/B,UAAM,EAAE,KAAA,IAAS,YAAY,SAAS;AAEnB,QAAI,KAAK;AACtB,UAAA,QAAQ,OAAO,aAAa;AACjC,UAAI,SAAS,YAAa;AAAA,IAI1B,GACE,EAAE,MAAM,MAAM;AAEQ,WAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvEhC,UAAM,QAAQ;AAOd,UAAM,iBAAiB,kBAAmB;AAC1C,UAAM,QAAQ,eAAe,aAAa,MAAM,OAAO;AAEvD,UAAM,mBAAmB,SAAS,MAAM;AACvC,UAAI,MAAM,YAAY,KAAM,QAAO;AACnC,cAAQ,OAAO,MAAM,OAAO,IAAI,KAAK,IAAI,IAAI,EAAE,GAAG,QAAQ,CAAC;AAAA,IAC7D,CAAE;;;;;;;;;;;;;;;;;;;;;;ACiCD,UAAM,SAAS,iBAAkB;AACjC,UAAM,YAAY,aAAc;AAChC,UAAM,EAAE,KAAI,IAAK,YAAY,SAAS;AAEtC,UAAM,eAAe,SAAS,MAAM;AACnC,aAAO,GAAG,OAAO,OAAO,MAAM,SAAS,KAAK,MAAM,SAAS;AAAA,IAC7D,CAAE;AAED,UAAM,EAAE,QAAS,IAAG,aAAc;AAClC,UAAM,mBAAmB,YAAY;AACpC,cAAQ,aAAa,KAAK;AAAA,IAC5B;AAEC,UAAM,iBAAiB,kBAAmB;AAC1C,UAAM,EAAE,OAAM,IAAK,YAAY,cAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["../../../../components/Backend/Dashboard/WalletChecker.vue","../../../../components/Backend/Partials/TokenCard.vue","../../../../pages/dashboard/index.vue"],"sourcesContent":["<template>\n\t<div>\n\t\t<div v-if=\"!wallet.isConnected\" class=\"user-notification-box-section mt30\">\n\t\t\t<div class=\"user-notification-box warning-bg-notification flex-wrap d-flex align-items-center justify-content-between\">\n\t\t\t\t<div class=\"notification-text-box d-flex\">\n\t\t\t\t\t<div class=\"notification-icon yellow-color\">\n\t\t\t\t\t\t<i class=\"fas fa-exclamation-triangle\"></i>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"notification-text\">\n\t\t\t\t\t\t<h5>Wallet Not Connected</h5>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tThis account not associate with any\n\t\t\t\t\t\t\t<span class=\"gradient-color\">web3 wallet.</span>\n\t\t\t\t\t\t\tPlease connect a wallet for next innovation.\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<a href=\"#\" role=\"button\" @click.prevent=\"modal.open()\" class=\"border-gradient btn3\">Connect Wallet</a>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div v-if=\"multipleAccount.length\" class=\"user-notification-table warning-bg-notification mt30\">\n\t\t\t<div class=\"notification-text-box d-flex\">\n\t\t\t\t<div class=\"notification-icon yellow-color\">\n\t\t\t\t\t<i class=\"fas fa-exclamation-triangle\"></i>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"notification-text\">\n\t\t\t\t\t<h5>We got another {{ multipleAccount.length }} account with this same wallet address. Please choose one and other account will be null.</h5>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"common-table mt30\">\n\t\t\t\t<table class=\"warning-table custom-table display nowrap mobile-table\">\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th>Unique ID</th>\n\t\t\t\t\t\t\t<th>Username</th>\n\t\t\t\t\t\t\t<th>Email</th>\n\t\t\t\t\t\t\t<th>Action</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td>{{ user.unique_id }}</td>\n\t\t\t\t\t\t\t<td>{{ user.username }}</td>\n\t\t\t\t\t\t\t<td>{{ user.email }}</td>\n\t\t\t\t\t\t\t<td class=\"text-center\">\n\t\t\t\t\t\t\t\t<a href=\"#\" role=\"button\" @click.prevent=\"choseWallet(user.unique_id, false)\" class=\"gradient-btn-small\">\n\t\t\t\t\t\t\t\t\t<i class=\"fas fa-link\"></i>\n\t\t\t\t\t\t\t\t\tSelect This\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr v-for=\"ma in multipleAccount\" :key=\"ma.unique_id\">\n\t\t\t\t\t\t\t<td>{{ ma.unique_id }}</td>\n\t\t\t\t\t\t\t<td>{{ ma.username ?? 'N/A' }}</td>\n\t\t\t\t\t\t\t<td>{{ ma.email }}</td>\n\t\t\t\t\t\t\t<td class=\"text-center\">\n\t\t\t\t\t\t\t\t<a href=\"#\" role=\"button\" @click.prevent=\"choseWallet(ma.unique_id, true)\" class=\"gradient-btn-small\">\n\t\t\t\t\t\t\t\t\t<i class=\"fas fa-link\"></i>\n\t\t\t\t\t\t\t\t\tSelect This\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</template>\n\n<script setup>\n\timport { useAppKitAccount } from '@reown/appkit/vue';\n\timport { getAddress } from \"ethers\";\n\tconst wallet = useAppKitAccount();\n\tconst { modal, myDisconnect } = useWeb3();\n\tconst multipleAccount = ref([]);\n\tconst authStore = useAuthStore();\n\tconst { user } = storeToRefs(authStore);\n\n\tconst isChecking = ref(false);\n\twatch(wallet, async (newValue) => {\n\t\tif (newValue.isConnected) {\n\t\t\tif (process.client) {\n\t\t\t\tawait checkWalletFromServer(getAddress(newValue.address));\n\t\t\t}\n\t\t}\n\t}, { deep: true });\n\n\tconst { useOnlyFetch } = useApi();\n\tconst { alert, confirm } = useSweetAlert();\n\n\tconst checkWalletFromServer = async (address) => {\n\t\tif (isChecking.value) return;\n\t\tisChecking.value = true;\n\t\ttry {\n\n\t\t\tif (user.value?.eth_address) {\n\t\t\t\tconst { data: existingAccounts } = await useOnlyFetch(`/get-wallet-existence`, {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\tbody: { address }\n\t\t\t\t});\n\t\t\t\tif (existingAccounts.value.length > 1) {\n\t\t\t\t\talert(`We found ${existingAccounts.value.length} account(s) connected to this same wallet. Choose one account to continue.`, \"warning\", 'Attention');\n\t\t\t\t\tmultipleAccount.value = existingAccounts.value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (address != null && getAddress(user.value.eth_address) !== address) {\n\t\t\t\t\talert(`Log Out! We found wallet mismatch.`, \"warning\", 'Warning');\n\t\t\t\t\tmyDisconnect(true);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst isConfirmed = await confirm('Wallet not associated yet. Do you want to connect this wallet?', 'warning', 'Attention');\n\t\t\t\tif (!isConfirmed) return;\n\t\t\t\tconst { data } = await useOnlyFetch('/update-wallet-existence', {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\tbody: { address }\n\t\t\t\t});\n\t\t\t\tauthStore.updateUser(data.value.user);\n\t\t\t\talert(\"Wallet connected successfully.\");\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error('Error checking wallet from server:', error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tconst choseWallet = async (unique_id) => {\n\t\tlet isConfirmed = await confirm(`Are you sure? You choose ${unique_id} for this account`, 'warning', 'Attention');\n\t\tif (!isConfirmed) return;\n\t\tawait useOnlyFetch('accept-wallet-existence', {\n\t\t\tmethod: 'POST',\n\t\t\tbody: { unique_id, address: wallet.value.address },\n\t\t\tonResponse({ response }) {\n\t\t\t\talert('Account wallet updated successfully.');\n\t\t\t\tmultipleAccount.value = [];\n\t\t\t\tif (unique_id !== user.value.unique_id) {\n\t\t\t\t\tdisconnect(true);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n</script>\n\n<style>\n</style>","<template>\n\t<div class=\"user-coin-balance d-flex align-items-center\">\n\t\t<div class=\"coin-balance-logo text-center\">\n\t\t\t<img :src=\"token.logo\" alt=\"icon\" />\n\t\t</div>\n\t\t<div class=\"coin-balance-info\">\n\t\t\t<h6>{{ token.name }}</h6>\n\t\t\t<h6 v-if=\"token.balance !== null\">\n\t\t\t\t<span>{{ formattedBalance }}</span>\n\t\t\t\t<sup>{{ token.symbol }}</sup>\n\t\t\t</h6>\n\t\t\t<p v-else>Loading balance...</p>\n\t\t</div>\n\t</div>\n</template>\n\n<script setup>\n\tconst props = defineProps({\n\t\ttokenId: {\n\t\t\ttype: Number,\n\t\t\trequired: true\n\t\t}\n\t});\n\n\tconst userTokenStore = useUserTokenStore();\n\tconst token = userTokenStore.getTokenById(props.tokenId);\n\n\tconst formattedBalance = computed(() => {\n\t\tif (token.balance === null) return '';\n\t\treturn (Number(token.balance) / Math.pow(10, 18)).toFixed(4);\n\t});\n/* \n\t\tonMounted(async () => {\n\t\t\tawait userTokenStore.fetchTokenBalance(props.tokenId);\n\t\t}); */\n\n</script>\n\n<style>\n</style>","<template>\n\t<div class=\"dashboard-body mt30\">\n\t\t<div class=\"user-info-overview-box d-flex align-items-center justify-content-between mt30\">\n\t\t\t<div class=\"user-info-text\">\n\t\t\t\t<h4>Hi, {{ user?.name }}!</h4>\n\t\t\t\t<h6>Username: {{ user?.username }}</h6>\n\t\t\t\t<h6>\n\t\t\t\t\tWallet:\n\t\t\t\t\t<span class=\"text-content\">{{ user?.eth_address || 'N/A' }}</span>\n\t\t\t\t</h6>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"user-notification-box-section mt30\">\n\t\t\t<div class=\"user-notification-box warning-bg-notification flex-wrap d-flex align-items-center justify-content-between\">\n\t\t\t\t<div class=\"notification-text-box d-flex\">\n\t\t\t\t\t<div class=\"notification-icon yellow-color\">\n\t\t\t\t\t\t<i class=\"fas fa-info-circle\"></i>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"notification-text\">\n\t\t\t\t\t\t<h5>Under Development</h5>\n\t\t\t\t\t\t<p class=\"gradient-color\">We are currently working on Version 3 to provide you with a better experience. Stay tuned for exciting updates!</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div class=\"refer-link-box mt30\">\n\t\t\t<div class=\"input bg-border-input\">\n\t\t\t\t<div class=\"refer-link-box-inner p30\">\n\t\t\t\t\t<div class=\"input bg-border-input\">\n\t\t\t\t\t\t<div class=\"refer-link-box-inner d-flex align-items-center g30 position-relative\">\n\t\t\t\t\t\t\t<p>Referral Link :</p>\n\t\t\t\t\t\t\t<input type=\"text\" id=\"refer-url\" ref=\"referralInput\" readonly :value=\"referralLink\" />\n\t\t\t\t\t\t\t<nuxt-img src=\"/images/dashboard/icon/copy.png\" alt=\"copy\" width=\"30\" @click.prevent=\"copyReferralLink\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<BackendDashboardWalletChecker />\n\n\t\t<ClientOnly>\n\t\t\t<BackendDashboardUserInformation />\n\t\t</ClientOnly>\n\n\t\t<div class=\"user-coin-balance-box mt30\">\n\t\t\t<div class=\"row gy-4\">\n\t\t\t\t<div v-for=\"token in tokens\" :key=\"token.id\" class=\"col-xxl-4 col-xl-6\">\n\t\t\t\t\t<BackendPartialsTokenCard :tokenId=\"token.id\" />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</template>\n\n<script setup>\n\tdefinePageMeta({\n\t\tauthenticated: true,\n\t\tlayout: 'backend',\n\t\ttitle: 'Dashboard'\n\t});\n\n\tconst config = useRuntimeConfig();\n\tconst authStore = useAuthStore();\n\tconst { user } = storeToRefs(authStore);\n\n\tconst referralLink = computed(() => {\n\t\treturn `${config.public.appUrl}/?ref=${user.value.unique_id}`;\n\t});\n\n\tconst { copyNow } = useClipboard();\n\tconst copyReferralLink = async () => {\n\t\tcopyNow(referralLink.value);\n\t}\n\n\tconst userTokenStore = useUserTokenStore();\n\tconst { tokens } = storeToRefs(userTokenStore);\n\n\tonMounted(async () => {\n\t\tawait userTokenStore.fetchFeatureTokens();\n\t});\n\n\n</script>\n\n<style>\n</style>"],"version":3}