{"file":"index-DVDxsl43.js","mappings":"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","names":["piniaPluginPersistedstate"],"sources":["../../../../stores/useUserTokenStore.js","../../../../components/Backend/Partials/TokenCard.vue","../../../../pages/dashboard/index.vue"],"sourcesContent":["import { defineStore } from \"pinia\";\n\nconst EXPIRATION_TIME = 3 * 60 * 1000; // 5 minutes\n\nexport const useUserTokenStore = defineStore(\"userToken\", {\n  state: () => ({\n    tokens: [],\n    isLoading: false,\n    error: null,\n    expirationTime: null,\n  }),\n\n  getters: {\n    getTokenById: (state) => (id) => state.tokens.find((token) => token.id === id),\n\n    isDataExpired: (state) => {\n      return !state.expirationTime || Date.now() >= state.expirationTime;\n    },\n\n    userETHAddress() {\n      const authStore = useAuthStore();\n      return authStore.user?.eth_address || \"\";\n    },\n  },\n\n  actions: {\n    async fetchFeatureTokens() {\n      if (!this.isDataExpired) return;\n      const { myFetch } = useApi();\n      this.isLoading = true;\n      this.error = null;\n\n      try {\n        const config = useRuntimeConfig();\n        const data = await myFetch(`${config.public.apiBase}/feature-tokens`);\n        const tokensWithBalances = await Promise.all(\n          data.map(async (token) => {\n            const balance = await this.fetchTokenBalance(token);\n            return {\n              ...token,\n              balance,\n            };\n          })\n        );\n        this.tokens = tokensWithBalances;\n        this.setExpirationTime();\n      } catch (error) {\n        this.error = \"Failed to fetch feature tokens\";\n      } finally {\n        this.isLoading = false;\n      }\n    },\n\n    async fetchTokenBalance(token) {\n      if (!this.userETHAddress) return 0;\n      if (token.contract_address == null) return 0;\n      const { myFetch } = useApi();\n      try {\n        const data = await myFetch(`token-balance/${token.contract_address}/${this.userETHAddress}`);\n        return data.balance;\n      } catch (error) {}\n    },\n\n    setExpirationTime() {\n      this.expirationTime = Date.now() + EXPIRATION_TIME;\n    },\n\n    resetIfExpired() {\n      if (this.isDataExpired) {\n        this.tokens = [];\n        this.expirationTime = null;\n        this.fetchFeatureTokens();\n      }\n    },\n  },\n\n  persist: {\n    storage: piniaPluginPersistedstate.localStorage(),\n    beforeRestore: (context) => {\n      context.store.resetIfExpired();\n    },\n  },\n});\n","<template>\n\t<div class=\"user-coin-balance d-flex align-items-center\">\n\t\t<div class=\"coin-balance-logo text-center\">\n\t\t\t<img :src=\"token.logo\" alt=\"icon\" />\n\t\t</div>\n\t\t<div class=\"coin-balance-info\">\n\t\t\t<h6>{{ token.name }}</h6>\n\t\t\t<h6 v-if=\"token.balance !== null\">\n\t\t\t\t<span>{{ formattedBalance }}</span>\n\t\t\t\t<sup>{{ token.symbol }}</sup>\n\t\t\t</h6>\n\t\t\t<p v-else>Loading balance...</p>\n\t\t</div>\n\t</div>\n</template>\n\n<script setup>\n\tconst props = defineProps({\n\t\ttokenId: {\n\t\t\ttype: Number,\n\t\t\trequired: true\n\t\t}\n\t});\n\n\tconst userTokenStore = useUserTokenStore();\n\tconst token = userTokenStore.getTokenById(props.tokenId);\n\n\tconst formattedBalance = computed(() => {\n\t\tif (token.balance === null) return '';\n\t\treturn (Number(token.balance) / Math.pow(10, 18)).toFixed(4);\n\t});\n/* \n\t\tonMounted(async () => {\n\t\t\tawait userTokenStore.fetchTokenBalance(props.tokenId);\n\t\t}); */\n\n</script>\n\n<style>\n</style>","<template>\n\t<div class=\"dashboard-body mt30\">\n\t\t<div class=\"user-info-overview-box d-flex align-items-center justify-content-between mt30\">\n\t\t\t<div class=\"user-info-text\">\n\t\t\t\t<h4>Hi, {{ user?.name }}!</h4>\n\t\t\t\t<h6>Username: {{ user?.username }}</h6>\n\t\t\t\t<h6>\n\t\t\t\t\tWallet:\n\t\t\t\t\t<span class=\"text-content\">{{ user?.eth_address || 'N/A' }}</span>\n\t\t\t\t</h6>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"user-notification-box-section mt30\">\n\t\t\t<div class=\"user-notification-box warning-bg-notification flex-wrap d-flex align-items-center justify-content-between\">\n\t\t\t\t<div class=\"notification-text-box d-flex\">\n\t\t\t\t\t<div class=\"notification-icon yellow-color\">\n\t\t\t\t\t\t<i class=\"fas fa-info-circle\"></i>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"notification-text\">\n\t\t\t\t\t\t<h5>Under Development</h5>\n\t\t\t\t\t\t<p class=\"gradient-color\">We are currently working on Version 3 to provide you with a better experience. Stay tuned for exciting updates!</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"refer-link-box mt30\">\n\t\t\t<div class=\"input bg-border-input\">\n\t\t\t\t<div class=\"refer-link-box-inner p30\">\n\t\t\t\t\t<div class=\"input bg-border-input\">\n\t\t\t\t\t\t<div class=\"refer-link-box-inner d-flex align-items-center g30 position-relative\">\n\t\t\t\t\t\t\t<p>Referral Link :</p>\n\t\t\t\t\t\t\t<input type=\"text\" id=\"refer-url\" ref=\"referralInput\" readonly :value=\"referralLink\" />\n\t\t\t\t\t\t\t<nuxt-img src=\"/images/dashboard/icon/copy.png\" alt=\"copy\" width=\"30\" @click.prevent=\"copyReferralLink\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div class=\"user-coin-balance-box mt30\">\n\t\t\t<div class=\"row gy-4\">\n\t\t\t\t<div v-for=\"token in tokens\" :key=\"token.id\" class=\"col-xxl-4 col-xl-6\">\n\t\t\t\t\t<BackendPartialsTokenCard :tokenId=\"token.id\" />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</template>\n\n<script setup>\n\n\tdefinePageMeta({\n\t\tauthenticated: true,\n\t\tlayout: 'backend',\n\t\ttitle: 'Dashboard'\n\t});\n\n\tconst config = useRuntimeConfig();\n\tconst authStore = useAuthStore();\n\tconst { user } = storeToRefs(authStore);\n\n\tconst referralLink = computed(() => {\n\t\treturn `${config.public.appUrl}/?ref=${user.value.unique_id}`;\n\t});\n\n\tconst { copyNow } = useClipboard();\n\tconst copyReferralLink = async () => {\n\t\tcopyNow(referralLink.value);\n\t}\n\n\tconst userTokenStore = useUserTokenStore();\n\tconst { tokens } = storeToRefs(userTokenStore);\n\n\tonMounted(async () => {\n\t\tawait userTokenStore.fetchFeatureTokens();\n\t});\n\n\n\t/* const api = useApi();\n\tconst { data } = api.useMyFetch('/user');\n\tconsole.log(data.value); */\n</script>\n\n<style>\n</style>"],"version":3}