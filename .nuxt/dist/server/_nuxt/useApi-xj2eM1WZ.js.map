{"version":3,"file":"useApi-xj2eM1WZ.js","sources":["../../../../composables/useApi.ts"],"sourcesContent":["// composables/useApi.ts\nimport { UseFetchOptions } from \"nuxt/app\";\n\nexport function useApi() {\n  const auth = useAuthStore();\n  const { toastError } = useToastAlert();\n\n  const fetchOptions = (): UseFetchOptions<any> => ({\n    baseURL: useRuntimeConfig().public.apiBase,\n\n    // Request Interceptor\n    onRequest({ options }) {\n      if (auth.token) {\n        options.headers = {\n          ...options.headers,\n          Authorization: `Bearer ${auth.token}`,\n        };\n        options.credentials = \"include\";\n      }\n    },\n\n    // Request Error\n    onRequestError({ error }) {\n      toastError(\"An error occurred while sending the request\");\n      return Promise.reject(error);\n    },\n\n    // Response Interceptor\n    onResponse({ response }) {\n      return response._data;\n    },\n\n    // Response Error\n    onResponseError({ error, response }) {\n      switch (response?.status) {\n        case 401:\n          auth.$reset();\n          toastError(response._data?.message || \"Unauthorized! Please log in.\");\n          navigateTo(\"/auth/login\");\n          break;\n\n        case 403:\n          toastError(\"Access denied! or Invalid request!\");\n          break;\n\n        case 404:\n          toastError(\"Requested resource not found.\");\n          break;\n\n        case 500:\n          toastError(\"Internal server error.\");\n          break;\n\n        default:\n          if (!response) {\n            toastError(\"Network error or server is unreachable.\");\n          } else {\n            toastError(response._data?.message || \"An error occurred\");\n          }\n      }\n      return Promise.reject(error);\n    },\n  });\n\n  return {\n    // For mutations (POST, PUT, DELETE)\n    fetch: async <T>(url: string, opts: UseFetchOptions<T> = {}) => {\n      const options = {\n        ...fetchOptions(),\n        ...opts,\n      };\n      return await $fetch<T>(url, options);\n    },\n\n    // For data fetching with SSR support\n    useFetch: <T>(url: string, opts: UseFetchOptions<T> = {}) => {\n      const options = {\n        ...fetchOptions(),\n        ...opts,\n      };\n      return useFetch<T>(url, options);\n    },\n\n    // For lazy loading data\n    useLazyFetch: <T>(url: string, opts: UseFetchOptions<T> = {}) => {\n      const options = {\n        ...fetchOptions(),\n        ...opts,\n      };\n      return useLazyFetch<T>(url, options);\n    },\n  };\n}\n"],"names":[],"mappings":";;AAGO,SAAS,SAAS;AACvB,QAAM,OAAO,aAAa;AACpB,QAAA,EAAE,WAAW,IAAI,cAAc;AAErC,QAAM,eAAe,OAA6B;AAAA,IAChD,SAAS,mBAAmB,OAAO;AAAA;AAAA,IAGnC,UAAU,EAAE,WAAW;AACrB,UAAI,KAAK,OAAO;AACd,gBAAQ,UAAU;AAAA,UAChB,GAAG,QAAQ;AAAA,UACX,eAAe,UAAU,KAAK,KAAK;AAAA,QACrC;AACA,gBAAQ,cAAc;AAAA,MAAA;AAAA,IAE1B;AAAA;AAAA,IAGA,eAAe,EAAE,SAAS;AAEjB,aAAA,QAAQ,OAAO,KAAK;AAAA,IAC7B;AAAA;AAAA,IAGA,WAAW,EAAE,YAAY;AACvB,aAAO,SAAS;AAAA,IAClB;AAAA;AAAA,IAGA,gBAAgB,EAAE,OAAO,YAAY;;AACnC,cAAQ,qCAAU,QAAQ;AAAA,QACxB,KAAK;AACH,eAAK,OAAO;AACD,uBAAA,cAAS,UAAT,mBAAgB,YAAW,8BAA8B;AACpE,qBAAW,aAAa;AACxB;AAAA,QAEF,KAAK;AAEH;AAAA,QAEF,KAAK;AAEH;AAAA,QAEF,KAAK;AAEH;AAAA,QAEF;AACE,cAAI,CAAC,SAAU;AAAA,eAER;AACM,yBAAA,cAAS,UAAT,mBAAgB,YAAW,mBAAmB;AAAA,UAAA;AAAA,MAC3D;AAEG,aAAA,QAAQ,OAAO,KAAK;AAAA,IAAA;AAAA,EAC7B;AAGK,SAAA;AAAA;AAAA,IAEL,OAAO,OAAU,KAAa,OAA2B,OAAO;AAC9D,YAAM,UAAU;AAAA,QACd,GAAG,aAAa;AAAA,QAChB,GAAG;AAAA,MACL;AACO,aAAA,MAAM,OAAU,KAAK,OAAO;AAAA,IACrC;AAAA;AAAA,IAGA,UAAU,CAAI,KAAa,OAA2B,OAAO;AAC3D,YAAM,UAAU;AAAA,QACd,GAAG,aAAa;AAAA,QAChB,GAAG;AAAA,MACL;AACO,aAAA,SAAY,KAAK,sBAAO;AAAA,IACjC;AAAA;AAAA,IAGA,cAAc,CAAI,KAAa,OAA2B,OAAO;AAC/D,YAAM,UAAU;AAAA,QACd,GAAG,aAAa;AAAA,QAChB,GAAG;AAAA,MACL;AACO,aAAA,aAAgB,KAAK,sBAAO;AAAA,IAAA;AAAA,EAEvC;AACF;"}