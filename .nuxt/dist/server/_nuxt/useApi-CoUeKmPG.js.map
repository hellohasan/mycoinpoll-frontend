{"version":3,"file":"useApi-CoUeKmPG.js","sources":["../../../../composables/useApi.ts"],"sourcesContent":["// composables/useApi.ts\nimport type { UseFetchOptions } from \"nuxt/app\";\n\nexport function useApi() {\n  const config = useRuntimeConfig();\n  const auth = useAuthStore();\n  const { toastError } = useToastAlert();\n\n  const fetchOptions = <T>(): UseFetchOptions<T> => ({\n    baseURL: config.public.apiBase,\n\n    onRequest({ options }) {\n      if (auth.token) {\n        if (!(options.headers instanceof Headers)) {\n          options.headers = new Headers(options.headers);\n        }\n        options.headers.set(\"Authorization\", `Bearer ${auth.token}`);\n      }\n    },\n\n    onRequestError({ error }) {\n      toastError(\"An error occurred while sending the request\");\n      return Promise.reject(error);\n    },\n\n    onResponse({ response }) {\n      return response._data;\n    },\n\n    onResponseError({ error, response }) {\n      switch (response?.status) {\n        case 401:\n          auth.$reset();\n          toastError(response._data?.message || \"Unauthorized! Please log in.\");\n          navigateTo(\"/auth/login\");\n          break;\n        case 403:\n          toastError(\"Access denied! or Invalid request!\");\n          break;\n        case 404:\n          toastError(\"Requested resource not found.\");\n          break;\n        case 500:\n          toastError(\"Internal server error.\");\n          break;\n        default:\n          toastError(response?._data?.message || \"An error occurred\");\n      }\n      return Promise.reject(error);\n    },\n  });\n\n  return {\n    // For mutations (POST, PUT, DELETE)\n    myFetch: async <T>(url: string, opts: UseFetchOptions<T> = {}) => {\n      return await $fetch<T>(url, {\n        ...(fetchOptions<T>() as any),\n        ...opts,\n        method: opts.method || \"GET\",\n      });\n    },\n\n    useOnlyFetch: <T>(url: string, opts: UseFetchOptions<T> = {}) => {\n      return useFetch<T>(url, {\n        ...(fetchOptions<T>() as any),\n        ...opts,\n        method: opts.method || \"GET\",\n        server: false,\n      });\n    },\n\n    // For SSR-supported data fetching\n    useMyFetch: <T>(url: string, opts: UseFetchOptions<T> = {}) => {\n      return useFetch<T>(url, {\n        ...(fetchOptions<T>() as any),\n        ...opts,\n        method: opts.method || \"GET\",\n      });\n    },\n\n    // For lazy loading data\n    useMyLazyFetch: <T>(url: string, opts: UseFetchOptions<T> = {}) => {\n      return useLazyFetch<T>(url, {\n        ...(fetchOptions<T>() as any),\n        ...opts,\n        method: opts.method || \"GET\",\n      });\n    },\n  };\n}\n"],"names":[],"mappings":";;AAGO,SAAS,SAAS;AACvB,QAAM,SAAS,iBAAiB;AAChC,QAAM,OAAO,aAAa;AACpB,QAAA,EAAE,WAAW,IAAI,cAAc;AAErC,QAAM,eAAe,OAA8B;AAAA,IACjD,SAAS,OAAO,OAAO;AAAA,IAEvB,UAAU,EAAE,WAAW;AACrB,UAAI,KAAK,OAAO;AACV,YAAA,EAAE,QAAQ,mBAAmB,UAAU;AACzC,kBAAQ,UAAU,IAAI,QAAQ,QAAQ,OAAO;AAAA,QAAA;AAE/C,gBAAQ,QAAQ,IAAI,iBAAiB,UAAU,KAAK,KAAK,EAAE;AAAA,MAAA;AAAA,IAE/D;AAAA,IAEA,eAAe,EAAE,SAAS;AAEjB,aAAA,QAAQ,OAAO,KAAK;AAAA,IAC7B;AAAA,IAEA,WAAW,EAAE,YAAY;AACvB,aAAO,SAAS;AAAA,IAClB;AAAA,IAEA,gBAAgB,EAAE,OAAO,YAAY;;AACnC,cAAQ,qCAAU,QAAQ;AAAA,QACxB,KAAK;AACH,eAAK,OAAO;AACD,uBAAA,cAAS,UAAT,mBAAgB,YAAW,8BAA8B;AACpE,qBAAW,aAAa;AACxB;AAAA,QACF,KAAK;AAEH;AAAA,QACF,KAAK;AAEH;AAAA,QACF,KAAK;AAEH;AAAA,QACF;AACa,uBAAA,0CAAU,UAAV,mBAAiB,YAAW,mBAAmB;AAAA,MAAA;AAEvD,aAAA,QAAQ,OAAO,KAAK;AAAA,IAAA;AAAA,EAC7B;AAGK,SAAA;AAAA;AAAA,IAEL,SAAS,OAAU,KAAa,OAA2B,OAAO;AACzD,aAAA,MAAM,OAAU,KAAK;AAAA,QAC1B,GAAI,aAAgB;AAAA,QACpB,GAAG;AAAA,QACH,QAAQ,KAAK,UAAU;AAAA,MAAA,CACxB;AAAA,IACH;AAAA,IAEA,cAAc,CAAI,KAAa,OAA2B,OAAO;AAC/D,aAAO,SAAY,KAAK;AAAA,QACtB,GAAI,aAAgB;AAAA,QACpB,GAAG;AAAA,QACH,QAAQ,KAAK,UAAU;AAAA,QACvB,QAAQ;AAAA,sBACT;AAAA,IACH;AAAA;AAAA,IAGA,YAAY,CAAI,KAAa,OAA2B,OAAO;AAC7D,aAAO,SAAY,KAAK;AAAA,QACtB,GAAI,aAAgB;AAAA,QACpB,GAAG;AAAA,QACH,QAAQ,KAAK,UAAU;AAAA,sBACxB;AAAA,IACH;AAAA;AAAA,IAGA,gBAAgB,CAAI,KAAa,OAA2B,OAAO;AACjE,aAAO,aAAgB,KAAK;AAAA,QAC1B,GAAI,aAAgB;AAAA,QACpB,GAAG;AAAA,QACH,QAAQ,KAAK,UAAU;AAAA,sBACxB;AAAA,IAAA;AAAA,EAEL;AACF;"}