{"file":"Index-DNIHiPhR.js","mappings":";;;;;;;;;;;;;;;;;;;;AAqBO,UAAA,oBAAoB,IAAI,EAAE;AAChC,UAAM,SAAS,iBAAiB;AAE1B,UAAA,EAAE,MAAM,SAAS,cAAc,SAAS,GAAG,OAAO,OAAO,OAAO,iBAAiB;AAAA,MACtF,YAAY,CAAC,EAAE,eAAe;AACX,0BAAA,QAAQ,SAAS,MAAM;AAAA,MAAA;AAAA,IAE3C,GAAA,aAAC;;;;;;;;;;;;;;;;;;;;;;AC1BK,MAAM,mBAAmB,YAAY,YAAY;AAAA,EACpD,OAAO,OAAO;AAAA,IACV,UAAU;AAAA,EAClB;AAAA,EACI,SAAS;AAAA,IACL,eAAe,OAAO;AAClB,WAAK,WAAW;AAAA,IACnB;AAAA,EACJ;AACL,CAAC;;;;;ACYA,UAAM,SAAS,iBAAiB;AAChC,UAAM,QAAQ,iBAAiB;AAC/B,UAAM,YAAY,aAAa;AAC/B,UAAM,EAAE,eAAe,SAAS,YAAY,SAAS;AAC/C,UAAA,eAAe,IAAI,EAAE;AAEP,iBAAa;;;;;;;;;;;;;;;;;;;;;;ACzBlC,MAAM,oBAAoB,IAAI,KAAK;AAEtB,MAAA,oBAAoB,YAAY,aAAa;AAAA,EACxD,OAAO,OAAO;AAAA,IACZ,cAAc;AAAA,MACZ,OAAO;AAAA,MACP,OAAO;AAAA,MACP,WAAW;AAAA,MACX,QAAQ;AAAA,MACR,YAAY;AAAA,MACZ,gBAAgB;AAAA,IAClB;AAAA,IACA,gBAAgB;AAAA,IAChB,aAAa;AAAA,EAAA;AAAA,EAGf,SAAS;AAAA,IACP,cAAc;AACR,UAAA,CAAC,KAAK,YAAoB,QAAA;AAC9B,YAAM,OAAM,oBAAI,KAAK,GAAE,QAAQ;AACxB,aAAA,MAAM,KAAK,cAAc;AAAA,IAAA;AAAA,EAEpC;AAAA,EAEA,SAAS;AAAA,IACP,MAAM,eAAe,YAAY,OAAO;AACjB;AAAA,IAsCvB;AAAA,IAEA,MAAM,qBAAqB;AACnB,YAAA,KAAK,eAAe,IAAI;AAAA,IAAA;AAAA,EAElC;AAAA,EACA,SAAS;AACX,CAAC;;;;;ACxCA,UAAM,iBAAiB,kBAAmB;AAC1C,UAAM,EAAE,cAAc,WAAW,eAAc,IAAK,YAAY,cAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpC/E,SAAA,eAAA,MAAA,OAAA,SAAA,QAAA;AAEM,QAAA,OAAkCA,eAAAC,WAAA;AAAA,IAAC,OAAM;AAAA,IAAM;IAAa;IAFlE,SAAA;AAAA;;;;;;;;;;;;;ACiIC,UAAM,SAAS,iBAAiB;AAEoD,YAAQ;AAEtF,UAAA,uBAAuB,IAAI,KAAK;AAChC,UAAA,aAAa,IAAI,SAAS;AAGhC,UAAM,iBAAiB,kBAAkB;AACzC,UAAM,EAAE,cAAc,WAAW,eAAe,IAAI,YAAY,cAAc;AAE9E,UAAM,gBAAgB,iBAAiB;AACvC,UAAM,EAAE,UAAU,qBAAqB,YAAY,aAAa;AAc1D,UAAA,MAAM,IAAI,EAAE;AACZ,UAAA,MAAM,IAAI,EAAE;AACZ,UAAA,OAAO,IAAI,EAAE;AACb,UAAA,UAAU,IAAI,EAAE;AAwBhB,UAAA,YAAY,IAAI,eAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["_ssrRenderAttrs","_mergeProps"],"sources":["../../../../components/EcmPurchase/IcoInfo.vue","../../../../stores/useReferralStore.js","../../../../components/EcmPurchase/Referral.vue","../../../../stores/useStageDataStore.js","../../../../components/EcmPurchase/IcoStat.vue","../../../../components/Icons/Disconnect.vue","../../../../components/EcmPurchase/Index.vue"],"sourcesContent":["<template>\n\t<div class=\"ecm-left-side\">\n\t\t<div class=\"section-heading\">\n\t\t\t<h3 class=\"text-shadow\">Unlocking eCommerce Potential with Digital Coin Solutions</h3>\n\t\t\t<p>Explore the ECM Cloud for Seamless eCommerce Integration, Unlocking Innovative Tools to Elevate your Metaverse Experience.</p>\n\t\t</div>\n\t\t<div class=\"ecm-address mt40\">\n\t\t\t<h5>ECM Contact Address</h5>\n\t\t\t<Skeletor v-if=\"isLoading\" class=\"bordered\" height=\"30px\" pill />\n\t\t\t<p v-else>{{ ecmContactAddress }}</p>\n\t\t</div>\n\t\t<ul class=\"d-flex align-items-center mt40 g30 flex-wrap\">\n\t\t\t<li><a role=\"button\" @click.prevent=\"downloadPDF('whitepaper')\" class=\"btn1 primary-btn\">White Paper</a></li>\n\t\t\t<li><a href=\"https://ecmcoin.com\" target=\"_blank\" class=\"btn2 primary-btn\">Official Website</a></li>\n\t\t</ul>\n\t</div>\n</template>\n\n<script setup>\n\timport { Skeletor } from 'vue-skeletor';\n\n\tconst ecmContactAddress = ref('');\n\tconst config = useRuntimeConfig();\n\n\tconst { data, pending: isLoading } = useFetch(`${config.public.apiBase}/get-ecm-info`, {\n\t\tonResponse: ({ response }) => {\n\t\t\tecmContactAddress.value = response._data.contract_address;\n\t\t}\n\t});\n\n\tconst downloadPDF = (type) => {\n\t\tlet fileUrl;\n\t\tif (type === 'whitepaper') {\n\t\t\tfileUrl = '/pdf/ECM-Whitepaper.pdf';\n\t\t} else if (type === 'affiliate') {\n\t\t\tfileUrl = '/pdf/MyCoinPoll-Affiliate-Program.pdf';\n\t\t}\n\t\t// create a link element and click it to trigger the download\n\t\tconst link = document.createElement('a');\n\t\tlink.href = fileUrl;\n\t\tlink.download = fileUrl.split('/').pop();\n\t\tdocument.body.appendChild(link);\n\t\tlink.click();\n\t\tdocument.body.removeChild(link);\n\t}\n</script>\n\n<style>\n</style>","import { defineStore } from \"pinia\";\n\nexport const useReferralStore = defineStore(\"referral\", {\n    state: () => ({\n        referral: \"0x0000000000000000000000000000000000000000\",\n    }),\n    actions: {\n        updateReferral(value) {\n            this.referral = value;\n        },\n    },\n});\n","<template>\n\t<div v-if=\"wallet.isConnected\" class=\"d-flex flex-column g-10 mt-20\">\n\t\t<div class=\"address-text input-group d-flex align-items-center secondary-btn-sm\">\n\t\t\t<span class=\"gradient-color\" id=\"wallet_address\">Your Address:</span>\n\t\t\t<input type=\"text\" class=\"form-control\" :value=\"wallet.address\" readonly=\"\" id=\"wallet_address\" placeholder=\"Your Address\" />\n\t\t</div>\n\t\t<div v-if=\"referralLink\" class=\"address-text input-group d-flex align-items-center position-relative secondary-btn-sm\">\n\t\t\t<span class=\"gradient-color\" id=\"referral_link\">Referral Link:</span>\n\t\t\t<input type=\"text\" class=\"form-control\" :value=\"referralLink\" readonly=\"\" id=\"referral_link\" placeholder=\"Referral Link\" />\n\t\t\t<button class=\"text-copy-btn\" type=\"button\" @click.prevent=\"copyToClipboard\" id=\"referred_by\"><i class=\"far fa-copy\"></i></button>\n\t\t</div>\n\t\t<div class=\"address-text input-group d-flex align-items-center secondary-btn-sm\">\n\t\t\t<span class=\"gradient-color\" id=\"referred_by\">Referred By:</span>\n\t\t\t<input type=\"text\" class=\"form-control\" v-model=\"store.referral\" @blur=\"validateReferral\" id=\"referred_by\" placeholder=\"Enter Referred By Wallet\" />\n\t\t</div>\n\t\t<div class=\"line-divider2 w-100 mb20 mt10\"></div>\n\t</div>\n</template>\n\n<script setup>\n\timport { useAppKitAccount } from '@reown/appkit/vue';\n\timport { isAddress } from 'ethers';\n\n\tconst wallet = useAppKitAccount();\n\tconst store = useReferralStore();\n\tconst authStore = useAuthStore();\n\tconst { authenticated, user } = storeToRefs(authStore);\n\tconst referralLink = ref('');\n\tconst config = useRuntimeConfig();\n\tconst { copyNow } = useClipboard();\n\n\n\tconst copyToClipboard = async () => {\n\t\tawait copyNow(referralLink.value);\n\t}\n\n\tif (process.client) {\n\t\twatch(authenticated, (newAuth) => {\n\t\t\tif (newAuth) {\n\t\t\t\treferralLink.value = `${config.public.appUrl}?ref=${user.value.unique_id}`\n\t\t\t} else {\n\t\t\t\treferralLink.value = '';\n\t\t\t}\n\t\t}, { immediate: true })\n\t}\n\n\tconst validateReferral = (event) => {\n\t\tconst input = event.target.value;\n\t\tif ((!input || !isAddress(input)) || input == wallet.value.address) {\n\t\t\tstore.updateReferral('0x0000000000000000000000000000000000000000')\n\t\t} else {\n\t\t\tstore.updateReferral(input)\n\t\t}\n\t}\n\n</script>\n\n<style lang=\"scss\" scoped>\n</style>\n","// stageDataStore.js\nimport { defineStore } from \"pinia\";\nimport { ethers, formatUnits, formatEther } from \"ethers\";\n\nconst CACHE_DURATION_MS = 3 * 60 * 1000;\n\nexport const useStageDataStore = defineStore(\"stageData\", {\n  state: () => ({\n    currentStage: {\n      index: null,\n      price: \"\",\n      usdtPrice: \"\",\n      target: null,\n      tokensSold: null,\n      percentageSold: null,\n    },\n    isStageLoading: false,\n    lastUpdated: null,\n  }),\n\n  getters: {\n    isDataStale() {\n      if (!this.lastUpdated) return true;\n      const now = new Date().getTime();\n      return now - this.lastUpdated > CACHE_DURATION_MS;\n    },\n  },\n\n  actions: {\n    async fetchStageData(forceLoad = false) {\n      if (!process.client) return;\n      if (!forceLoad && !this.isDataStale) return;\n      try {\n        this.isStageLoading = true;\n        const { alchemyLink, SaleAddress, SaleContractABI } = useWeb3();\n        if (!alchemyLink) {\n          throw new Error(\"Alchemy link is not configured\");\n        }\n        const provider = new ethers.JsonRpcProvider(alchemyLink);\n        if (!SaleAddress || !SaleContractABI) {\n          throw new Error(\"Contract address or ABI is missing\");\n        }\n\n        const contract = new ethers.Contract(SaleAddress, SaleContractABI, provider);\n        const stageData = await contract.currentStageInfo();\n\n        const index = Number(formatUnits(stageData[0], 0)) + 1;\n        const target = formatEther(stageData[1]);\n        const price = formatEther(stageData[2]);\n        const usdtPrice = formatUnits(stageData[3], 6);\n        const tokensSold = Number(formatEther(stageData[6])).toFixed(4);\n        const percentageSold = parseFloat(target) > 0 ? (parseFloat(tokensSold) / parseFloat(target)) * 100 : 0;\n\n        this.currentStage = {\n          index,\n          price,\n          usdtPrice,\n          target,\n          tokensSold,\n          percentageSold: percentageSold.toFixed(1),\n        };\n\n        this.lastUpdated = new Date().getTime();\n      } catch (error) {\n        throw error;\n      } finally {\n        this.isStageLoading = false;\n      }\n    },\n\n    async forceLoadStageData() {\n      await this.fetchStageData(true);\n    },\n  },\n  persist: true,\n});\n","<template>\n\t<div class=\"ecm-right-header\">\n\t\t<ul class=\"d-flex align-items-center justify-content-between flex-wrap\">\n\t\t\t<template v-if=\"isStageLoading\">\n\t\t\t\t<li>\n\t\t\t\t\t<Skeletor width=\"215\" height=\"30\" pill />\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<Skeletor width=\"180\" height=\"30\" pill />\n\t\t\t\t</li>\n\t\t\t</template>\n\t\t\t<template v-else>\n\t\t\t\t<li>Stage {{ stageData.index }}: {{ stageData.tokensSold }} ECM</li>\n\t\t\t\t<li>Max: {{ stageData.target }} ECM</li>\n\t\t\t</template>\n\t\t</ul>\n\t\t<div class=\"ico-progress\">\n\t\t\t<Skeletor v-if=\"isStageLoading\" height=\"30\" pill />\n\t\t\t<div v-else class=\"progress\">\n\t\t\t\t<div class=\"progress-bar align-items-end\" role=\"progressbar\" :style=\"{ width: stageData.percentageSold + '%' }\" :aria-valuenow=\"stageData.percentageSold\" aria-valuemin=\"0\" aria-valuemax=\"100\">\n\t\t\t\t\t<span>{{ stageData.percentageSold }}%</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"line-divider2 w-100 mt-20 mb20\"></div>\n\t\t<template v-if=\"isStageLoading\">\n\t\t\t<Skeletor width=\"100%\" height=\"52\" />\n\t\t\t<Skeletor width=\"100%\" height=\"52\" class=\"mt-2\" />\n\t\t</template>\n\t\t<EcmPurchaseReferral v-else></EcmPurchaseReferral>\n\t</div>\n</template>\n\n<script setup>\n\timport { Skeletor } from 'vue-skeletor';\n\tconst stageDataStore = useStageDataStore();\n\tconst { currentStage: stageData, isStageLoading } = storeToRefs(stageDataStore);\n</script>\n\n<style>\n</style>","\n<template>\n\t<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewBox=\"0 0 512 512\"><path fill=\"currentColor\" fillRule=\"evenodd\" d=\"m109.72 221.26l37.711 37.712l25.065-25.064l30.17 30.17l-25.065 25.064l45.255 45.255l25.065-25.064l30.17 30.17l-25.065 25.064l37.713 37.712l-30.17 30.17l-15.085-15.085c-36.49 36.49-92.839 41.015-134.255 13.577l-36.25 36.247l-30.169-30.17l36.248-36.249c-27.438-41.416-22.913-97.765 13.577-134.255L79.55 251.43zM89.75 59.58l362.668 362.668l-30.17 30.17L59.58 89.75zm35.055 237.104c-24.994 24.994-24.994 65.516 0 90.51c24.1 24.1 62.641 24.962 87.773 2.582l2.736-2.582zM437.019 44.81l30.17 30.17l-46.915 46.916c27.438 41.416 22.913 97.765-13.577 134.255l15.085 15.085l-30.17 30.17l-181.02-181.02l30.17-30.17l15.086 15.085c36.49-36.49 92.839-41.015 134.254-13.576zm-148.266 88.079l-2.735 2.582l89.377 89.377c17.735-26.918 22.652-67.857 1.132-89.377c-24.1-24.1-62.641-24.961-87.774-2.582\"></path></svg>\n</template>\n","<template>\n\t<div class=\"row align-items-center\">\n\t\t<div class=\"col-xl-6\">\n\t\t\t<EcmPurchaseIcoInfo />\n\t\t</div>\n\t\t<div class=\"col-xl-6\">\n\t\t\t<div class=\"ecm-right-box\">\n\t\t\t\t<EcmPurchaseIcoStat />\n\n\t\t\t\t<div class=\"ecm-form mt15\">\n\t\t\t\t\t<h4 v-if=\"isStageLoading\" class=\"mb20\">\n\t\t\t\t\t\t<Skeletor height=\"36\" pill class=\"mt-2\" />\n\t\t\t\t\t</h4>\n\t\t\t\t\t<h4 v-else class=\"mb20\">ICO is Live</h4>\n\n\t\t\t\t\t<div class=\"ico-tab mb20\">\n\t\t\t\t\t\t<template v-if=\"isStageLoading\">\n\t\t\t\t\t\t\t<div class=\"d-flex align-items-center g-20\">\n\t\t\t\t\t\t\t\t<Skeletor width=\"50%\" as=\"div\" height=\"54\" pill />\n\t\t\t\t\t\t\t\t<Skeletor width=\"50%\" as=\"div\" height=\"54\" pill />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</template>\n\t\t\t\t\t\t<ul v-else class=\"d-flex align-items-center g-20\">\n\t\t\t\t\t\t\t<li class=\"ico-tab-btn gradient-btn w-50\" :class=\"{ active: activeTab === 'eth-coin-form' }\" @click=\"switchTab('eth-coin-form')\">\n\t\t\t\t\t\t\t\t<nuxt-img src=\"/images/icon/eth.png\" loading=\"lazy\" alt=\"eth\" />\n\t\t\t\t\t\t\t\tBuy with ETH\n\t\t\t\t\t\t\t\t<span class=\"ico-tab-select-icon\"><i class=\"fa-solid fa-circle-check\"></i></span>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li class=\"ico-tab-btn gradient-btn w-50\" :class=\"{ active: activeTab === 'usdt-coin-form' }\" @click=\"switchTab('usdt-coin-form')\">\n\t\t\t\t\t\t\t\t<nuxt-img src=\"/images/icon/usdt.png\" alt=\"ecm\" />\n\t\t\t\t\t\t\t\tBuy with USDT\n\t\t\t\t\t\t\t\t<span class=\"ico-tab-select-icon\"><i class=\"fa-solid fa-circle-check\"></i></span>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div v-show=\"activeTab === 'eth-coin-form'\" class=\"ico-tab-content\">\n\t\t\t\t\t\t<template v-if=\"isStageLoading\">\n\t\t\t\t\t\t\t<Skeletor height=\"30\" pill class=\"mb-4\" />\n\t\t\t\t\t\t</template>\n\t\t\t\t\t\t<ul v-else class=\"d-flex justify-content-center mt-1 mb20\">\n\t\t\t\t\t\t\t<li class=\"text-white\">1 ECM = {{ stageData.price }} ETH</li>\n\t\t\t\t\t\t</ul>\n\n\t\t\t\t\t\t<div class=\"subscribe-form\">\n\t\t\t\t\t\t\t<template v-if=\"isStageLoading\">\n\t\t\t\t\t\t\t\t<Skeletor v-for=\"i in 3\" :key=\"i\" class=\"mt-2\" height=\"55\"></Skeletor>\n\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t<template v-else>\n\t\t\t\t\t\t\t\t<form @submit.prevent=\"purchaseECM('ETH')\">\n\t\t\t\t\t\t\t\t\t<div class=\"subscribe-email mb20 d-flex align-items-center mw-100\">\n\t\t\t\t\t\t\t\t\t\t<nuxt-img src=\"/images/icon/ecm.png\" alt=\"icon\" />\n\t\t\t\t\t\t\t\t\t\t<input v-model=\"ecm\" type=\"text\" placeholder=\"ECM Amount\" :readonly=\"isPurchaseProcessing\" />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div class=\"subscribe-email mb20 d-flex align-items-center mw-100\">\n\t\t\t\t\t\t\t\t\t\t<nuxt-img src=\"/images/icon/eth.png\" alt=\"icon\" />\n\t\t\t\t\t\t\t\t\t\t<input v-model=\"eth\" type=\"text\" placeholder=\"ETH Payable\" :readonly=\"isPurchaseProcessing\" />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<button v-if=\"wallet.isConnected\" type=\"submit\" :disabled=\"isPurchaseProcessing\" class=\"btn1 primary-btn submit-btn w-100 mb20\">\n\t\t\t\t\t\t\t\t\t\t<i v-show=\"isPurchaseProcessing\" class=\"fa fa-spinner fa-spin me-1\"></i>\n\t\t\t\t\t\t\t\t\t\t{{ walletText }}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<button v-else type=\"button\" @click=\"modal.open()\" class=\"btn1 primary-btn submit-btn w-100 mb20\">{{ walletText }}</button>\n\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div v-show=\"activeTab === 'usdt-coin-form'\" class=\"ico-tab-content\">\n\t\t\t\t\t\t<template v-if=\"isStageLoading\">\n\t\t\t\t\t\t\t<Skeletor height=\"30\" pill class=\"mb-4\" />\n\t\t\t\t\t\t</template>\n\t\t\t\t\t\t<ul v-else class=\"d-flex justify-content-center mt-1 mb20\">\n\t\t\t\t\t\t\t<li class=\"text-white\">1 ECM = {{ stageData.usdtPrice }} USDT</li>\n\t\t\t\t\t\t</ul>\n\n\t\t\t\t\t\t<div class=\"subscribe-form\">\n\t\t\t\t\t\t\t<template v-if=\"isStageLoading\">\n\t\t\t\t\t\t\t\t<Skeletor v-for=\"i in 3\" :key=\"i\" class=\"mt-2\" height=\"55\"></Skeletor>\n\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t<template v-else>\n\t\t\t\t\t\t\t\t<form @submit.prevent=\"purchaseECM('USDT')\">\n\t\t\t\t\t\t\t\t\t<div class=\"subscribe-email mb20 d-flex align-items-center mw-100\">\n\t\t\t\t\t\t\t\t\t\t<nuxt-img src=\"/images/icon/ecm.png\" alt=\"icon\" />\n\t\t\t\t\t\t\t\t\t\t<input v-model=\"ecm\" type=\"text\" placeholder=\"ECM Amount\" :readonly=\"isPurchaseProcessing\" />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div class=\"subscribe-email mb20 d-flex align-items-center mw-100\">\n\t\t\t\t\t\t\t\t\t\t<nuxt-img src=\"/images/icon/usdt.png\" alt=\"icon\" />\n\t\t\t\t\t\t\t\t\t\t<input v-model=\"usdt\" type=\"text\" placeholder=\"USDT Payable\" :readonly=\"isPurchaseProcessing\" />\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<button v-if=\"wallet.isConnected\" type=\"submit\" :disabled=\"isPurchaseProcessing\" class=\"btn1 primary-btn submit-btn w-100 mb20\">\n\t\t\t\t\t\t\t\t\t\t<i v-show=\"isPurchaseProcessing\" class=\"fa fa-spinner fa-spin me-1\"></i>\n\t\t\t\t\t\t\t\t\t\t{{ walletText }}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<button v-else type=\"button\" @click=\"modal.open()\" class=\"btn1 primary-btn submit-btn w-100 mb20\">{{ walletText }}</button>\n\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<template v-if=\"isStageLoading\">\n\t\t\t\t\t<Skeletor height=\"55\" />\n\t\t\t\t</template>\n\t\t\t\t<template v-else>\n\t\t\t\t\t<a v-if=\"trxHash\" :href=\"`https://etherscan.io/tx/${trxHash}`\" target=\"_blank\" class=\"green-outline-btn d-flex align-items-center justify-content-between mt-20\">\n\t\t\t\t\t\t<span class=\"gradient-color\"><b>Hash:</b></span>\n\t\t\t\t\t\t<span class=\"clip-text\">{{ trxHash }}</span>\n\t\t\t\t\t\t<span class=\"text-copy-btn rotate-50\"><i class=\"fa-solid fa-arrow-right-long\"></i></span>\n\t\t\t\t\t</a>\n\t\t\t\t</template>\n\n\t\t\t\t<div :class=\"['mt-3', { 'text-center': !isStageLoading }]\">\n\t\t\t\t\t<Skeletor v-if=\"isStageLoading\" height=\"55\" />\n\t\t\t\t\t<button v-else-if=\"wallet.isConnected\" type=\"button\" class=\"red-outline-btn w-100 d-flex justify-content-center align-items-center mt-20\" :disabled=\"isPurchaseProcessing\" @click.prevent=\"disconnect\">\n\t\t\t\t\t\tDisconnect\n\t\t\t\t\t\t<IconsDisconnect />\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</template>\n\n<script setup>\n\timport { Skeletor } from 'vue-skeletor';\n\timport { useAppKitAccount, useAppKitProvider } from '@reown/appkit/vue';\n\timport { parseUnits, formatUnits, BrowserProvider, Contract, formatEther } from 'ethers';\n\n\tconst wallet = useAppKitAccount();\n\tconst config = useRuntimeConfig();\n\tconst { modal, disconnect, SaleAddress, SaleContractABI, USDTAddress, IERC20ABI } = useWeb3();\n\n\tconst isPurchaseProcessing = ref(false);\n\tconst walletText = ref('Buy ECM');\n\tconst { toastSuccess, toastError } = useToastAlert();\n\n\tconst stageDataStore = useStageDataStore();\n\tconst { currentStage: stageData, isStageLoading } = storeToRefs(stageDataStore);\n\n\tconst referralStore = useReferralStore();\n\tconst { referral: purchaseReferral } = storeToRefs(referralStore);\n\n\tonMounted(async () => {\n\t\tawait loadStageData();\n\t});\n\n\tconst loadStageData = async (forceLoad = false) => {\n\t\ttry {\n\t\t\tawait stageDataStore.fetchStageData(forceLoad);\n\t\t} catch (error) {\n\t\t\ttoastError('Failed to load stage data. Please try again.');\n\t\t}\n\t};\n\n\tconst ecm = ref('');\n\tconst eth = ref('');\n\tconst usdt = ref('');\n\tconst trxHash = ref('');\n\n\tif (process.client) {\n\t\twatch([ecm, eth, usdt], ([newEcm, newEth, newUsdt], [oldEcm, oldEth, oldUsdt]) => {\n\t\t\t// Case 1: ETH changed\n\t\t\tif (newEth !== oldEth && !isNaN(newEth)) {\n\t\t\t\tconst calculatedEcm = parseFloat((newEth / stageData.value.price).toFixed(6));\n\t\t\t\tecm.value = calculatedEcm.toString();\n\t\t\t\tusdt.value = parseFloat((calculatedEcm * stageData.value.usdtPrice).toFixed(2)).toString();\n\t\t\t}\n\t\t\t// Case 2: USDT changed\n\t\t\telse if (newUsdt !== oldUsdt && !isNaN(newUsdt)) {\n\t\t\t\tconst calculatedEcm = parseFloat((newUsdt / stageData.value.usdtPrice).toFixed(6));\n\t\t\t\tecm.value = calculatedEcm.toString();\n\t\t\t\teth.value = parseFloat((calculatedEcm * stageData.value.price).toFixed(6)).toString();\n\t\t\t}\n\t\t\t// Case 3: ECM changed\n\t\t\telse if (newEcm !== oldEcm && !isNaN(newEcm)) {\n\t\t\t\teth.value = parseFloat((newEcm * stageData.value.price).toFixed(6)).toString();\n\t\t\t\tusdt.value = parseFloat((newEcm * stageData.value.usdtPrice).toFixed(2)).toString();\n\t\t\t}\n\t\t});\n\t}\n\n\tconst activeTab = ref('eth-coin-form');\n\tconst switchTab = (tabName) => {\n\t\tactiveTab.value = tabName;\n\t}\n\n\tconst validateInput = (value, type = 'eth') => {\n\t\tconst num = Number(value);\n\t\tif (isNaN(num) || num <= 0) return false;\n\t\treturn type === 'ecm' ? num <= stageData.value.target : true;\n\t};\n\n\tconst purchaseECM = async (paymentType) => {\n\t\tif (isPurchaseProcessing.value) return;\n\t\ttry {\n\t\t\ttrxHash.value = null;\n\t\t\tisPurchaseProcessing.value = true;\n\t\t\twalletText.value = \"Wallet connecting...\";\n\n\t\t\tconst maxPurchasable = parseFloat(stageData.value.target) - parseFloat(stageData.value.tokensSold);\n\t\t\tconst purchaseAmount = parseFloat(ecm.value);\n\n\t\t\tif (!validateInput(eth.value) || !validateInput(ecm.value, 'ecm') || !validateInput(usdt.value, 'usdt')) {\n\t\t\t\tthrow new Error('Enter valid ECM or ETH amount.');\n\t\t\t}\n\n\t\t\tif (purchaseAmount > maxPurchasable) {\n\t\t\t\tthrow new Error(`Purchase amount (${purchaseAmount.toFixed(2)} ECM) exceeds maximum purchasable amount (${maxPurchasable.toFixed(2)} ECM)`);\n\t\t\t}\n\n\t\t\tconst { walletProvider } = useAppKitProvider('eip155');\n\t\t\tconst ethersProvider = new BrowserProvider(walletProvider)\n\t\t\tconst signer = await ethersProvider.getSigner();\n\n\t\t\tlet usdtAmount;\n\t\t\tif (paymentType === 'USDT') {\n\t\t\t\t// First approve USDT spending\n\t\t\t\tconst usdtContract = new Contract(USDTAddress, IERC20ABI, signer);\n\t\t\t\twalletText.value = \"Approving USDT...\";\n\n\t\t\t\tconst balance = await usdtContract.balanceOf(wallet.value.address);\n\t\t\t\tusdtAmount = parseUnits(usdt.value, 6);\n\n\t\t\t\tif (BigInt(balance) < BigInt(usdtAmount)) {\n\t\t\t\t\tthrow new Error(`Insufficient USDT balance. You have ${formatUnits(balance, 6)} USDT`);\n\t\t\t\t}\n\t\t\t\tconst approveTx = await usdtContract.approve(SaleAddress, usdtAmount);\n\t\t\t\tawait approveTx.wait();\n\t\t\t}\n\n\t\t\tconst contract = new Contract(SaleAddress, SaleContractABI, signer);\n\t\t\twalletText.value = \"Transaction Processing...\";\n\n\t\t\tlet transaction;\n\t\t\tif (paymentType === 'ETH') {\n\t\t\t\ttransaction = await contract.buyECMWithETH(purchaseReferral.value, { value: parseUnits(eth.value, 18) });\n\t\t\t} else if (paymentType === 'USDT') {\n\t\t\t\ttransaction = await contract.buyECMWithUSDT(usdtAmount, purchaseReferral.value);\n\t\t\t}\n\n\t\t\tconst receipt = await transaction.wait();\n\t\t\ttrxHash.value = receipt.hash;\n\n\t\t\tawait forceLoadStageData();\n\n\t\t\tlet payload = {\n\t\t\t\thash: receipt.hash,\n\t\t\t\tbuyer: \"\",\n\t\t\t\tamount: \"\",\n\t\t\t\tstage: \"\",\n\t\t\t\treferralAddress: null,\n\t\t\t\treferralAmount: null,\n\t\t\t\treferralETH: null,\n\t\t\t\tpaymentType: null\n\t\t\t};\n\n\t\t\treceipt.logs.forEach(log => {\n\t\t\t\ttry {\n\t\t\t\t\tconst parsedLog = contract.interface.parseLog(log);\n\t\t\t\t\tif (parsedLog?.name === 'ECMPurchased') {\n\t\t\t\t\t\tpayload.buyer = parsedLog.args[0];\n\t\t\t\t\t\tpayload.amount = formatEther(parsedLog.args[1]);\n\t\t\t\t\t\tpayload.stage = parsedLog.args[2].toString();\n\t\t\t\t\t\tpayload.paymentType = parsedLog.args[3].toString();\n\t\t\t\t\t} else if (parsedLog?.name === 'ReferralRewardPaid') {\n\t\t\t\t\t\tpayload.referralAddress = parsedLog.args[0];\n\t\t\t\t\t\tpayload.referralAmount = formatEther(parsedLog.args[1]);\n\t\t\t\t\t\tpayload.referralETH = formatEther(parsedLog.args[2]);\n\t\t\t\t\t}\n\t\t\t\t} catch { }\n\t\t\t});\n\n\t\t\tawait $fetch(`${config.public.apiBase}/purchase-ecm-completed`, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\tbody: JSON.stringify(payload),\n\t\t\t})\n\t\t\ttoastSuccess('ECM purchase successfully completed.');\n\n\t\t} catch (error) {\n\t\t\tconst errorMessage = error.shortMessage\n\t\t\t\t? error.shortMessage.charAt(0).toUpperCase() + error.shortMessage.slice(1)\n\t\t\t\t: error.message || 'Unknown error occurred';\n\t\t\ttoastError(errorMessage);\n\t\t} finally {\n\t\t\tisPurchaseProcessing.value = false;\n\t\t\twalletText.value = \"Buy ECM\";\n\t\t\tecm.value = '';\n\t\t\teth.value = '';\n\t\t\tusdt.value = '';\n\t\t}\n\t}\n\n\tconst forceLoadStageData = async () => {\n\t\tawait loadStageData(true);\n\t};\n</script>\n\n<style>\n</style>"],"version":3}